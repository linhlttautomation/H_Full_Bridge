//#############################################################################
//  \file sdfm_filter_sync.cla
//
//  \brief  SDFM filter sync
//  \author
//  \date
//
//
//  Group:             C2000
//  Target Family:    F2837xD
//
//#############################################################################
//
// 
// $Copyright:
// Copyright (C) 2013-2024 Texas Instruments Incorporated - http://www.ti.com/
//
// Redistribution and use in source and binary forms, with or without 
// modification, are permitted provided that the following conditions 
// are met:
// 
//   Redistributions of source code must retain the above copyright 
//   notice, this list of conditions and the following disclaimer.
// 
//   Redistributions in binary form must reproduce the above copyright
//   notice, this list of conditions and the following disclaimer in the 
//   documentation and/or other materials provided with the   
//   distribution.
// 
//   Neither the name of Texas Instruments Incorporated nor the names of
//   its contributors may be used to endorse or promote products derived
//   from this software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// $
//#############################################################################

//
// Included Files
//
#include "cla_sdfm_filter_sync_shared.h"
#include "F2837xD_cla.h"
#include "F2837xD_piectrl.h"
#include "F2837xD_sdfm_drivers.h"
#include "F2837xD_struct.h"
#include "F2837xD_epwm.h"
#include "F2837xD_adc.h"
#include "setting.h"
#include "SinPWM_CLA.h"
#include "variables.h"
#include "Ramp.h"
#include "RAMP_GEN_CLA.h"
#include "PWM_3T_CLA.h"
#include "CLAmath.h"
//
// Whether MDEBUGSTOP needs to be compiled or not
//
#define CLA_DEBUG       0
#define PIEACK_GROUP5   0x0010

#pragma DATA_SECTION(Filter1_Result,"Filter1_RegsFile");
#pragma DATA_SECTION(Filter2_Result,"Filter2_RegsFile");
#pragma DATA_SECTION(Filter3_Result,"Filter3_RegsFile");
#pragma DATA_SECTION(Filter4_Result,"Filter4_RegsFile");

#pragma DATA_SECTION(CpuToCLA,"CpuToCla1MsgRAM");
volatile CPU_TO_CLA CpuToCLA;

#pragma DATA_SECTION(ClaToCPU,"Cla1ToCpuMsgRAM");
volatile  CLA_TO_CPU ClaToCPU;

#pragma DATA_SECTION(Spwm,"CLADataLS0");
volatile SPWM_CLA Spwm;

#pragma DATA_SECTION(rc1,"CLADataLS0");
volatile RC_CLA rc1;

#pragma DATA_SECTION(rg1,"CLADataLS0");
volatile RAMP_GEN_CLA rg1;

#pragma DATA_SECTION(rc_Ref,"CLADataLS0");
volatile RC_CLA rc_Ref;

#pragma DATA_SECTION(Us,"CLADataLS0");
volatile float Us;

#pragma DATA_SECTION(pwm,"CLADataLS0");
volatile PWMGEN_3T_CLA pwm;

short  Filter1_Result[MAX_SAMPLES];
short  Filter2_Result[MAX_SAMPLES];
short  Filter3_Result[MAX_SAMPLES];
short  Filter4_Result[MAX_SAMPLES];

Uint32 TaskClaTask1;

//
// Task 1
//
__interrupt void Cla1Task1 ( void )
{
#if (CLA_DEBUG==1)
__mdebugstop();
#endif
    TaskClaTask1 ++;

#if(BUILDLEVEL == LEVEL1)

    //Ramp f by rc1
    rc1.TargetValue = 50.0/150.0;
    RC_CLA_MACRO(rc1)

    //Ramp f by rg1
    rg1.Freq = 50.0/100.0;
    RAMP_GEN_CLA_MACRO(rg1)

    // Ramp Us
    rc_Ref.TargetValue = 220.0/400.0;
    RC_CLA_MACRO(rc_Ref)
    Us = 1.414213562*rc_Ref.SetpointValue*CLAsinPU(rg1.Out);

    Spwm.Usa   = Us;
    Spwm.Usb   = Us;
    Spwm.Udc   = 400.0/800.0;

    Spwm.T1 = (1.0*400.0/800.0)*Spwm.Usa/(0.50*Spwm.Udc);
    Spwm.T2 = (1.0*400.0/800.0)*Spwm.Usb/(0.50*Spwm.Udc);

    Spwm.Ta = Spwm.T1/2.0 + 0.50;
    Spwm.Tb = Spwm.T2/2.0 + 0.50;

    if (Spwm.Ta < 0.0) Spwm.Ta = 0.0; else if(Spwm.Ta > 1.0) Spwm.Ta = 1.0;
    if (Spwm.Tb < 0.0) Spwm.Tb = 0.0; else if(Spwm.Tb > 1.0) Spwm.Tb = 1.0;

    pwm.MfuncA1 = Spwm.Ta;
    pwm.MfuncA2 = Spwm.Tb;

    EPwm1Regs.CMPA.bit.CMPA =(Uint16)(pwm.MfuncA1*pwm.PeriodMax);
    EPwm2Regs.CMPA.bit.CMPA =(Uint16)(pwm.MfuncA2*pwm.PeriodMax);
#endif

}

//
// Task 2
//
__interrupt void Cla1Task2 ( void )
{
#if (CLA_DEBUG==1)
__mdebugstop();
#endif

}

//
// Task 3
//
__interrupt void Cla1Task3 ( void )
{
    #if (CLA_DEBUG==1)
    __mdebugstop();
    #endif
}

//
// Task 4
//
__interrupt void Cla1Task4 ( void )
{
    #if (CLA_DEBUG==1)
    __mdebugstop();
    #endif
}

//
// Task 5
//
__interrupt void Cla1Task5 ( void )
{
    #if (CLA_DEBUG==1)
    __mdebugstop();
    #endif

}

//
// Task 6
//
__interrupt void Cla1Task6 ( void )
{
    #if (CLA_DEBUG==1)
    __mdebugstop();
    #endif
}

//
// Task 7
//
__interrupt void Cla1Task7 ( void )
{
    #if (CLA_DEBUG==1)
    __mdebugstop();
    #endif
}

//
// Task 8
//
__interrupt void Cla1Task8 ( void )
{
    TaskClaTask1 = 0;
    pwm.PeriodMax = 1000;
}

//
// End of file
//
